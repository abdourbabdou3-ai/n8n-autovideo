{
  "name": "VED L5DMTI",
  "nodes": [
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"video_title\": {\n          \"type\": \"string\",\n          \"description\": \"the title of the video we use on YouTube\"\n        },\n        \"scenes\": {\n            \"type\": \"array\",\n            \"description\": \"the scenes of the video\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"text\": {\n                        \"type\": \"string\",\n                        \"description\": \"the main content; this will be used to generate speech from\"\n                    },\n                    \"searchTerms\": {\n                        \"type\": \"array\",\n                        \"description\": \"the search terms to use to find background videos on pexels\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"required\": [\n                    \"text\",\n                    \"searchTerms\"\n                ]\n            }\n        }\n    },\n    \"required\": [\n        \"scenes\",\n        \"video_title\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1728,
        192
      ],
      "id": "9f8de032-06ad-42fd-9753-842f8fbd963c",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a19f9caa-f1aa-4ff0-a270-59248eeb27dd",
              "name": "SERVER_URL",
              "value": "http://host.docker.internal:3123",
              "type": "string"
            },
            {
              "id": "85f6a401-7a8f-4002-900d-8320cee8f553",
              "name": "PLACEHOLDER",
              "value": "unused",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2656,
        -96
      ],
      "id": "2feeea12-75cf-4d0b-aed0-4556ae98bdf6",
      "name": "Configure"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure').item.json.SERVER_URL }}/api/short-video",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"scenes\": {{ JSON.stringify($('Generate content').item.json.output.scenes, null, 2) }},\n  \"config\": {\n    \"paddingBack\": 1500,\n    \"music\": \"{{ $json.output.musicTag }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -960,
        -96
      ],
      "id": "912e42c4-ea3d-4d42-9c71-cb2abb65f32f",
      "name": "Start generating the video"
    },
    {
      "parameters": {
        "amount": 25
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -640,
        -112
      ],
      "id": "6ac9f836-a44a-4a96-ac67-b1e54c03dbae",
      "name": "Wait",
      "webhookId": "fe4501f9-3334-4fc8-b3dd-83ea0ebb14a2"
    },
    {
      "parameters": {
        "url": "={{ $('Configure').item.json.SERVER_URL }}/api/short-video/{{ $('Start generating the video').item.json.videoId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        128,
        -128
      ],
      "id": "257ae084-58ac-4e8a-a001-ebc725f0f9ae",
      "name": "Download the video",
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "url": "={{ $('Configure').item.json.SERVER_URL }}/api/short-video/{{ $('Start generating the video').item.json.videoId }}/status",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -368,
        -112
      ],
      "id": "a6233d40-6e4b-42aa-8251-428a40429f1b",
      "name": "Check video status",
      "alwaysOutputData": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6cc1bd80-2bb7-47b6-950e-be3d6a36a965",
              "leftValue": "={{ $json.status }}",
              "rightValue": "ready",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -128,
        -112
      ],
      "id": "b772bc1f-c907-4ba5-ba28-25a3600dc38f",
      "name": "Ready?"
    },
    {
      "parameters": {
        "url": "={{ $json.SERVER_URL }}/api/music-tags",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2464,
        -96
      ],
      "id": "70e523b1-af34-47f6-845a-20a43162180b",
      "name": "Get music tags"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"musicTag\": {\n            \"type\": \"string\",\n            \"description\": \"the selected music tag that goes well with the video\"\n        }\n    },\n    \"required\": [\n        \"musicTag\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1280,
        128
      ],
      "id": "dd0d3004-8f1b-426b-b8a6-4bda6df971dd",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I'm generating a video programmatically using an API. I've already generated the scenes, and your task is to find the right music tag for he video.\n\n<VideoScenes>\n{{ $json.output.scenes.map(item => item.text).map(item => `<VideoScene>${item}</VideoScene>`).join('\\n') }}\n</VideoScenes>\n\n<MusicTags>\n{{ $('Group the music tags').item.json.data.map(item => `<MusicTag>${item}</MusicTag>`).join('\\n') }}\n</MusicTags>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1424,
        -96
      ],
      "id": "6d737897-413a-4311-a64b-2d025e829909",
      "name": "Pick the right music",
      "retryOnFail": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2176,
        -96
      ],
      "id": "5a7ab7a0-3b5b-43d1-bc4d-6eb8df045e23",
      "name": "Group the music tags"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2896,
        -96
      ],
      "id": "176611bd-fc34-470a-972d-9aea1f318ea0",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2048,
        208
      ],
      "id": "724bd779-1277-499c-b9b5-98b9062372cb",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "xtCiokwzom2eXfWz",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I‚Äôm creating short promotional videos programmatically using an API.\nEach video will have 4 scenes.  \nFor each scene, you must provide:\n\n- ‚Äútext‚Äù: a short voiceover line (10‚Äì15 seconds)  \n- ‚Äúsearch_terms‚Äù: 2‚Äì3 one-word keywords to pull related background clips from Pexels  \n\nüé• GOAL:\nThese videos promote my web design and eCommerce store creation services.  \nThey should feel modern, viral, motivational, and emotionally persuasive ‚Äî like short stories that make business owners, creators, or beginners feel they *need* a website or an online store now.\n\nüèóÔ∏è STRUCTURE:\nEach video = 4 scenes (around 1 minute total)\n1Ô∏è‚É£ Scene 1 (HOOK): Start with a powerful question or shocking truth about the online world.\n2Ô∏è‚É£ Scene 2 (PROBLEM): Describe the pain or missed opportunity of not having a website/store.\n3Ô∏è‚É£ Scene 3 (SOLUTION): Show how having a professional website or store changes everything.\n4Ô∏è‚É£ Scene 4 (CTA): End with a strong call to action ‚Äî for example:\n   ‚ÄúIf you need a website or an online store, message me now.‚Äù\n   ‚ÄúI design powerful websites that sell ‚Äî contact me today.‚Äù\n\nüß† TONE:\n- Confident, modern, and inspiring\n- Use curiosity and authority\n- Talk directly to the viewer\n- Mix Arabic and English naturally if it adds virality\n- Always end with a CTA inviting viewers to contact me personally\n\nüìã OUTPUT FORMAT:\nReturn a valid JSON array with 4 objects, like:\n[\n  {\n    \"scene_number\": 1,\n    \"text\": \"...\",\n    \"search_terms\": [\"...\",\"...\"]\n  },\n  ...\n]\n\nüéØ PURPOSE:\nTo generate multiple short TikTok/YouTube videos that build trust, attract clients, and sell my website & eCommerce design services automatically.\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1904,
        -96
      ],
      "id": "826d3679-68c5-4197-923f-93d23ac6149b",
      "name": "Generate content",
      "retryOnFail": true
    }
  ],
  "pinData": {},
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate content",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Configure": {
      "main": [
        [
          {
            "node": "Get music tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Check video status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download the video": {
      "main": [
        []
      ]
    },
    "Start generating the video": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check video status": {
      "main": [
        [
          {
            "node": "Ready?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ready?": {
      "main": [
        [
          {
            "node": "Download the video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get music tags": {
      "main": [
        [
          {
            "node": "Group the music tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Pick the right music",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Pick the right music": {
      "main": [
        [
          {
            "node": "Start generating the video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group the music tags": {
      "main": [
        [
          {
            "node": "Generate content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Configure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Pick the right music",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate content": {
      "main": [
        [
          {
            "node": "Pick the right music",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false
  },
  "versionId": "26bd4efe-25ed-4e25-a023-5a47f7f5440c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4cdfc35909217504e497d64791711a62453a1072bb32b67948267ea16b76002b"
  },
  "id": "mhTN3fVobfmZPgJv",
  "tags": []
}